using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;


namespace MO.SystemInvader
{
    public class Level
    {
        int[,] map = new int[,] 
        {
           //00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//0
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//1
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//2
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//3
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//4
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//5
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//6
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//7
            {01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//8
            {01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//9
            {01,01,01,00,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//10
            {01,01,01,00,01,01,00,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//11
            {01,01,01,00,01,01,00,00,00,00,00,00,00,00,01,01,01,01,01,01,01,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//12
            {01,01,01,00,01,01,01,01,01,01,01,01,01,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//13
            {01,01,01,00,01,01,01,01,01,01,01,01,01,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//14
            {01,01,01,00,01,01,01,01,01,01,01,01,01,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//15
            {01,01,01,00,01,01,01,01,01,01,01,01,01,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//16
            {01,01,01,00,01,01,01,01,01,01,01,01,01,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//17
            {01,01,01,00,01,01,01,01,01,01,01,01,01,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//18
            {01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//19
            {01,01,01,01,01,01,01,01,01,01,00,01,01,01,01,01,00,01,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//20
            {01,01,01,01,01,01,01,01,01,01,00,01,01,01,01,01,00,01,01,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//21
            {01,01,01,01,01,01,01,01,01,01,00,01,01,01,01,01,00,00,00,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//22
            {00,00,01,01,01,01,00,00,00,00,00,00,01,01,01,01,00,00,00,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//23
            {00,00,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//24
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//25
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,01,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//26
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//27
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//28
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//29
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//30
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//31
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//32
            {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},//33
        };

        Queue<Vector2> waypoints = new Queue<Vector2>();

        public int WidthMap => map.GetLength(1);
        public int HeightMap => map.GetLength(0);

        public Texture2D _textureMap;
        public Texture2D _textureScreen;
        public Texture2D _map;

        //WATERFALL
        public Texture2D _textureWaterFall1;
        public Texture2D _textureWaterFall2;
        public Texture2D _textureWaterFall3;
        public Texture2D _effect1;

        private float _timeChangeSprite;

        Point _spritesEnemy = new Point(0, 0);
        Point _limitSprites = new Point(3, 4);

        private Vector2 _supplement = new Vector2(1, 1) * 16;
        public Vector2 AtTheEnd => new Vector2(53, 5) * 32 + new Vector2(1, 1) * 16;

        List<Texture2D> _listTextureMap;
        List<Texture2D> _listTextureScreen; 
        List<Vector2> _listPaths = new List<Vector2>();

        public Queue<Vector2> Waypoints => waypoints;

        public int WindowWidth => 1920;
        public int WindowHeight => 1080;

        public Level()
        {
            AddWaypoints();
            _listTextureMap = new List<Texture2D>();
        }

        public void AddWaterFall(Texture2D water1, Texture2D water2, Texture2D water3, Texture2D effect1)
        {
            _textureWaterFall1 = water1;
            _textureWaterFall2 = water2;
            _textureWaterFall3 = water3;
            _effect1 = effect1;
        }

        private bool IsInPaths2(int value)
        {
            for (int i = 0; i < 27; i++)
            {
                if (value == 7 || value == 8)
                    return false;
            }
            return true;
        }

        public bool IsInPaths(Vector2 vectorPos, Tower tower)
        {
            Vector2 vectorBase = vectorPos;
            for (int i = 0; i < WidthMap; i++)
            {
                for (int j = 0; j < HeightMap; j++)
                {
                    if (IsInPaths2(map[j, i]))
                    {
                        int tileX = i;
                        int tileY = j;
                        if (((tileX * 32) == vectorBase.X && (tileY * 32) == vectorBase.Y - 64) ||
                            ((tileX + 1) * 32 == vectorBase.X + 64 && (tileY * 32) == vectorBase.Y - 64) ||
                            ((tileX * 32) == vectorBase.X && (tileY + 1) * 32 == vectorBase.Y) ||
                            ((tileX + 1) * 32 == vectorBase.X + 64 && (tileY + 1) * 32 == vectorBase.Y))
                            return true;
                    }
                }
            }
            return false;
        }

        public void AddWaypoints()
        {
            waypoints.Enqueue(new Vector2(4, 3) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(4, 4) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(6, 4) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(6, 12) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(13, 12) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(13, 19) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(10, 19) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(10, 23) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(11, 23) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(11, 24) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(49, 24) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(49, 19) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(53, 19) * 32 + _supplement);
            waypoints.Enqueue(new Vector2(53, 5) * 32 + _supplement);
        }
        
        public void AddMap(Texture2D map)
        {
            _map = map;
        }

        public void AddTextureMap(List<Texture2D> listTexture)
        {
            _listTextureMap = listTexture;
        }

        public void AddTextureScreen(List<Texture2D> listTextureScreen)
        {
            _listTextureScreen = listTextureScreen;
        }
        //Animation////////////////////////////////////////
        public void SpritesUpdate()
        {
            if (_spritesEnemy.X < _limitSprites.X - 1)
                _spritesEnemy.X += 1;
            else
                _spritesEnemy.X = 0;
            _timeChangeSprite = 0;
        }
        public void Update(GameTime gameTime)
        {
            //Animation
            _timeChangeSprite += (float)gameTime.ElapsedGameTime.TotalSeconds;

            if (_timeChangeSprite > 0.2)
            {
                SpritesUpdate();
            }
        }
        //Draw/////////////////////////////////////////////////////////////////////////////////
        public void Draw(SpriteBatch batch)
        {
            batch.Draw(_map, new Rectangle(0,0,_map.Width,_map.Height), Color.White);
            batch.Draw(_textureWaterFall1,
                    new Rectangle(30*32 + 9, 7*32 - 3, 96, 128),
                    new Rectangle(_spritesEnemy.X * 96, 0, 96, 128),
                    Color.White);
            batch.Draw(_textureWaterFall2,
                    new Rectangle(16 * 32-16, 27 * 32, 161, 103),
                    new Rectangle(_spritesEnemy.X * 161, 0, 161, 103),
                    Color.White);
            batch.Draw(_textureWaterFall2,
                    new Rectangle(40 * 32 - 13, 29 * 32, 161, 103),
                    new Rectangle(_spritesEnemy.X * 161, 0, 161, 103),
                    Color.White);
        }


    }
}
